
import Mathlib

section Seq_cpt_continuity

lemma IsSeqCompact.image {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] (f : X ‚Üí Y) (hf : Continuous f) {K : Set X}
    (hK : IsSeqCompact K) : IsSeqCompact (f '' K) := by
  sorry


lemma SeqCompactSpace.range {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] [SeqCompactSpace X] (f : X ‚Üí Y) (hf : Continuous f)
    : IsSeqCompact (Set.range f) := by
  sorry

end Seq_cpt_continuity

section Metrizability_lemma

variable {X : Type*} [TopologicalSpace X] [CompactSpace X]
--variable (g : X ‚Üí ‚Ñù) (g_cont : Continuous g)
variable (gs : ‚Ñï ‚Üí X ‚Üí ‚Ñù)
variable (gs_cont : ‚àÄ n, Continuous (gs n))
variable (gs_sep : Set.SeparatesPoints (Set.range gs))
variable (gs_bdd : ‚àÄ n x, |gs n x| ‚â§ 1)

noncomputable def ourMetric (x y : X) : ‚Ñù :=
  ‚àë' n, 1/2^n * |gs n x - gs n y|

lemma ourMetric_self_iff : ‚àÄ {x y : X}, ourMetric gs x y = 0 ‚Üî x = y := by
  intro x y
  constructor
  { intro sum
    rw[ourMetric] at sum
    --apply ENNReal.tsum_eq_zero.mpr n (1/2^n * |gs n x - gs n y|) at sum
    --have foo := @ENNReal.tsum_eq_zero ‚Ñï (fun n ‚Ü¶ 1/2^n * |gs n x - gs n y|)
    have sum_zero : ‚àë' n, 1/2^n * |gs n x - gs n y| = 0 ‚Üí ‚àÄ n, 1/2^n * |gs n x - gs n y| = 0 := by
      intro sum


      sorry

    apply sum_zero at sum
    -- gs_sep
    have mul_const_eq_zero : ‚àÄ (n : ‚Ñï), 1 / 2 ^ n * |gs n x - gs n y| = 0 ‚Üí |gs n x - gs n y| = 0 := by
      sorry
    --apply mul_const_eq_zero at sum
    --
    --abs_eq_zero
    sorry
    }
  { intro x_eq_y
    rw[ourMetric, x_eq_y]
    simp
  }


lemma ourMetric_comm : ‚àÄ x y : X, ourMetric gs x y = ourMetric gs y x := by
  intro x y
  rw[ourMetric, ourMetric]
  have abs_eq : ‚àÄ n, |gs n x - gs n y| = |gs n y - gs n x| := by
    exact fun n ‚Ü¶ abs_sub_comm (gs n x) (gs n y)
  rw[tsum_congr]
  intro b
  rw[abs_eq]


lemma ourMetric_triangle : ‚àÄ x y z : X, ourMetric gs x z ‚â§ ourMetric gs x y + ourMetric gs y z := by
  intro x y z
  rw[ourMetric, ourMetric, ourMetric]
/-
  have plusminus_eq_zero : ‚àÄ n, gs n y - gs n y = 0 := by
    intro n
    rw[sub_self (gs n y)]
-/
  have plusminus_eq_self : ‚àÄ n, |gs n x - gs n z| = |gs n x + (gs n y - gs n y) - gs n z| := by
    intro n
    simp [sub_self (gs n y)]
    --specialize plusminus_eq_zero n
    --rw[plusminus_eq_zero, add_zero]

  simp_rw[plusminus_eq_self]

  have tri_ineq : ‚àÄ n, 1/2^n * |gs n x + (gs n y - gs n y) - gs n z| ‚â§ 1/2^n * |gs n x - gs n y| + 1/2^n * |gs n y - gs n z| := by
    intro n
    rw[‚Üê add_comm_sub, add_sub_assoc (gs n x - gs n y) (gs n y) (gs n z), ‚Üê mul_add]
    refine (mul_le_mul_left ?_).mpr ?_
    ¬∑ refine one_div_pos.mpr ?refine_1.a
      refine pow_pos ?refine_1.a.H n
      linarith
    ¬∑ apply abs_add (gs n x - gs n y) (gs n y - gs n z)

  have tsum_tri_ineq : ‚àë' (n : ‚Ñï), 1 / 2 ^ n * |gs n x + (gs n y - gs n y) - gs n z| ‚â§
      ‚àë' (n : ‚Ñï), (1 / 2 ^ n * |gs n x + - gs n y| + 1 / 2 ^ n * |gs n y - gs n z|) := by
    --simp_rw[tri_eq]
    apply tsum_le_tsum
    ¬∑ exact tri_ineq
    ¬∑ sorry
    ¬∑ sorry

  have tsum_add_ineq : ‚àë' (n : ‚Ñï), (1 / 2 ^ n * |gs n x + - gs n y| + 1 / 2 ^ n * |gs n y - gs n z|) =
      ‚àë' (n : ‚Ñï), 1 / 2 ^ n * |gs n x - gs n y| + ‚àë' (n : ‚Ñï), 1 / 2 ^ n * |gs n y - gs n z| := by
    apply tsum_add
    ¬∑ sorry
    ¬∑ sorry


  rw[tsum_add_ineq] at tsum_tri_ineq
  exact tsum_tri_ineq
#check ourMetric
--noncomputable instance ourMetric_space (MetricSpace X) := by
noncomputable def ourMetricSpace : MetricSpace X where
  dist := ourMetric gs
  dist_self := by
    intro x
    exact (@ourMetric_self_iff X gs x x ).mpr rfl
  dist_comm := by sorry
  dist_triangle := by sorry
  edist_dist := by simp [‚Üê ENNReal.ofReal_coe_nnreal]
  eq_of_dist_eq_zero := by sorry


/- If X is compact, and there exists a seq of continuous real-valued functions that
separates points on X, then X is metrizable. -/
lemma X_metrizable (X ùïú : Type*) [NormedField ùïú] [TopologicalSpace X] [CompactSpace X]
    (gs : ‚Ñï ‚Üí X ‚Üí ùïú) (gs_cont : ‚àÄ n, Continuous (gs n))
    (gs_sep : Set.SeparatesPoints (Set.range gs)) :
    TopologicalSpace.MetrizableSpace X := by
  refine ‚ü®?_‚ü©
  sorry
/-
  letI : MetricSpace X := TopologicalSpace.MetrizableSpaceMetric X
  {dist := ourMetric,
  eq_of_dist_eq_zero := by ourMetric_self_iff.mp
  dist_self := by ourMetric_self_iff.mpr
  dist_comm := by ourMetric_comm
  dist_triangle := by ourMetric_triangle
  }-/


#check Set.range gs
#check Set.SeparatesPoints (Set.range gs)
#check X_metrizable
variable (x y : X)
#check @tsum ‚Ñù _ _ ‚Ñï (fun n ‚Ü¶ 1/2^n * |gs n x - gs n y|)
#check tsum (fun n ‚Ü¶ 1/2^n * |gs n x - gs n y|)
#check @ENNReal.tsum_eq_zero
#check IsAbsoluteValue.abv_sub
#check TopologicalSpace.MetrizableSpace
#check TopologicalSpace.MetrizableSpace X
#check MeasureTheory.LevyProkhorov
#check Summable


end Metrizability_lemma

section Seq_Banach_Alaoglu

--variable (ùïú : Type*)
variable (V : Type*) [AddCommGroup V] [Module ‚ÑÇ V] -- (V tvs)
variable [SeminormedAddCommGroup V] [NormedSpace ‚ÑÇ V]
variable [TopologicalSpace.SeparableSpace V]
variable (K : Set (WeakDual ‚ÑÇ V)) (K_cpt : IsCompact K)

example (œï : WeakDual ‚ÑÇ V) (v : V) : False := by
  set a := œï v

  sorry
/- There exists a sequence of continuous functions that separates points on V*. -/
lemma exists_gs : ‚àÉ (gs : ‚Ñï ‚Üí (WeakDual ‚ÑÇ V) ‚Üí ‚ÑÇ), (‚àÄ n, Continuous (gs n)) ‚àß Set.SeparatesPoints (Set.range gs) := by
  set vs := TopologicalSpace.denseSeq V
  set gs : ‚Ñï ‚Üí K ‚Üí ‚ÑÇ := fun n ‚Ü¶ fun œï ‚Ü¶ (œï : WeakDual ‚ÑÇ V) (vs n)

  -- TopologicalSpace.exists_countable_dense

  sorry


/- A compact subset of the dual V* of a separable space V is metrizable. -/
lemma subset_metrizable : TopologicalSpace.MetrizableSpace K := by
  have k_cpt' : CompactSpace K := by
    exact isCompact_iff_compactSpace.mp K_cpt
  set vs := TopologicalSpace.denseSeq V
  set gs : ‚Ñï ‚Üí K ‚Üí ‚ÑÇ := fun n ‚Ü¶ fun œï ‚Ü¶ (œï : WeakDual ‚ÑÇ V) (vs n)
  apply X_metrizable K ‚ÑÇ gs
  ¬∑ intro n
    /-have phi_c : Continuous fun œï ‚Ü¶ (œï : WeakDual ‚ÑÇ V) (vs n) := by
      exact WeakDual.eval_continuous (vs n)-/
    /-have := @Continuous.comp K (WeakDual ‚ÑÇ V) ‚ÑÇ _ _ _ (fun œà ‚Ü¶ œà) (fun œï ‚Ü¶ (œï : WeakDual ‚ÑÇ V) (vs n)) phi_c (by exact
      continuous_subtype_val)-/
    exact Continuous.comp (WeakDual.eval_continuous (vs n)) continuous_subtype_val
    --have gs_c : Continuous fun n ‚Ü¶ fun œï ‚Ü¶ (œï : WeakDual ‚ÑÇ V) (vs n) := by
      --exact { isOpen_preimage := fun s a ‚Ü¶ trivial }

    --exact { gs := fun n ‚Ü¶ fun œï ‚Ü¶ (œï : WeakDual ‚ÑÇ V) (vs n) }

  ¬∑ rintro x y x_neq_y


    --have exists_sep : ‚àÉ (gs : ‚Ñï ‚Üí (WeakDual ‚ÑÇ V) ‚Üí ‚ÑÇ), Set.SeparatesPoints (Set.range gs) := by
    sorry
#check Continuous.restrict
#check @WeakDual.toNormedDual ‚ÑÇ _ V _ _
/- The closed unit ball is sequentially compact in V* if V is separable. -/
theorem WeakDual.isSeqCompact_closedBall (x' : NormedSpace.Dual ‚ÑÇ V) (r : ‚Ñù) :
    IsSeqCompact (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) := by

  let B := (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r)


  let Œπ : (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) ‚Üí WeakDual ‚ÑÇ V := by
    intro œï
    let œà := œï.val
    convert œà
    sorry

  have b_isCompact : IsCompact (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) := by
    apply WeakDual.isCompact_closedBall
  have b_isCompact' : CompactSpace (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) := by
    exact isCompact_iff_compactSpace.mp b_isCompact

  have b_isMetrizable : TopologicalSpace.MetrizableSpace (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) := by
    --exact subset_metrizable V (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r)
    --exact subset_metrizable V (‚áëtoNormedDual ‚Åª¬π' Metric.closedBall x' r) b_isCompact

    sorry
  --apply UniformSpace.isCompact_iff_isSeqCompact at b_isCompact
  have seq_cpt_space := @FirstCountableTopology.seq_compact_of_compact (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r)
      _ _ b_isCompact'
  have seq_cpt := (@seqCompactSpace_iff (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) _ ).mp seq_cpt_space


  --fun œï ‚Ü¶ œï


  -- have seq_incl := @SeqCompactSpace.range (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r)
     -- (WeakDual ‚ÑÇ V) _ _ _ (Subtype.val ((WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) : Type _))




/-
  apply IsCompact.isSeqCompact at b_isCompact
  ¬∑ exact b_isCompact
  ¬∑ sorry
-/
  sorry


#check IsSeqCompact
#check Module.Dual
#check WeakDual ‚ÑÇ V
#check Set (WeakDual ‚ÑÇ V)
#check IsCompact
#check @UniformSpace.isCompact_iff_isSeqCompact
#check IsCompact.isSeqCompact
#check TopologicalSpace.exists_countable_dense
#check subset_metrizable

end Seq_Banach_Alaoglu
