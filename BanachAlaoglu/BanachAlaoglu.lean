
import Mathlib
set_option maxHeartbeats 1000000
section Seq_cpt_continuity

--variable (ys : ‚Ñï ‚Üí f '' K)

lemma IsSeqCompact.image {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] (f : X ‚Üí Y)
    (hf : SeqContinuous f) {K : Set X} (hK : IsSeqCompact K) : IsSeqCompact (f '' K) := by
  rw [IsSeqCompact]
  intro ys hy
  simp [Set.mem_image] at hy
  have n := ‚Ñï
  --simp only [Set.mem_image, exists_exists_and_eq_and]
  have xs := ‚Ñï ‚Üí X --:= fun n ‚Ü¶ f ‚Åª¬π' (ys n)
  --have := ‚àÄ n : ‚Ñï, xs n ‚àà K ‚àß f (xs n) = ys n
  --obtain ‚ü®xs, hx‚ü© := hy
  have hxs :  ‚àÄ x : ‚Ñï ‚Üí X, (‚àÄ (n : ‚Ñï), x n ‚àà K) ‚Üí ‚àÉ a ‚àà K, ‚àÉ œÜ : ‚Ñï ‚Üí ‚Ñï,
      StrictMono œÜ ‚àß Filter.Tendsto (x ‚àò œÜ) Filter.atTop (nhds a) := by
    exact fun ‚¶Éx‚¶Ñ a ‚Ü¶ hK a

  --hxs xs
  --specialize hxs xs
  --obtain ‚ü®x, n, xn‚ü© := hxs
  --let foo := ‚àÄ n, f (xs n) = ys n
  --have : ‚àÄ n : ‚Ñï, xs n ‚àà K := by sorry
  --simp only [Set.mem_image, exists_exists_and_eq_and]
  --have := hxs this
  --obtain ‚ü®a, ha, œï, h‚ü© := this
  --use a, ha, œï
  --have : ‚àÄ œÜ : ‚Ñï ‚Üí ‚Ñï, ‚àÄ n : ‚Ñï, ys ‚àò œÜ = ((fun n ‚Ü¶ f (xs n)) ‚àò œÜ) := by
    --intro phi
    --simp only [forall_const]

    --sorry
  sorry
#check Filter.tendsto_of_seq_tendsto

--#check Filter.Tendsto (ys ‚àò œÜ) Filter.atTop (nhds a)
--#check

example {X : Type*} [TopologicalSpace X] [SeqCompactSpace X] : IsSeqCompact (Set.univ : Set X) := by
  exact (seqCompactSpace_iff X).mp ‚ÄπSeqCompactSpace X‚Ä∫

lemma SeqCompactSpace.range {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] [SeqCompactSpace X]
    (f : X ‚Üí Y) (hf : SeqContinuous f) : IsSeqCompact (Set.range f) := by
  have := (@seqCompactSpace_iff X _ ).mp ‚ÄπSeqCompactSpace X‚Ä∫
  have foo : Set.range f = (f '' Set.univ) := by exact Eq.symm Set.image_univ
  rw[foo]
  apply IsSeqCompact.image f hf this


#check SeqCompactSpace
#check IsSeqCompact
#check @SeqCompactSpace.tendsto_subseq
#check @IsSeqCompact.subseq_of_frequently_in
#check Set.mem_image_iff_bex

--#check fun n ‚Ü¶ (xs n)

end Seq_cpt_continuity



section Metrizability_lemma
--set_option diagnostics true

variable {X ùïú : Type*} [TopologicalSpace X] [CompactSpace X] [NormedField ùïú]
--variable (g : X ‚Üí ‚Ñù) (g_cont : Continuous g)
variable (gs : ‚Ñï ‚Üí X ‚Üí ùïú)
variable (gs_cont : ‚àÄ n, Continuous (gs n))
variable (gs_sep : Set.SeparatesPoints (Set.range gs))
variable (gs_bdd : ‚àÄ n : ‚Ñï, ‚àÄ x : X, ‚Äñgs n x‚Äñ  ‚â§ 1)

noncomputable def ourMetric (x y : X) : ‚Ñù :=
  ‚àë' n, (1/2)^n * ‚Äñgs n x - gs n y‚Äñ


lemma ourMetric_self_iff : ‚àÄ {x y : X}, ourMetric gs x y = 0 ‚Üî x = y := by
  intro x y
  constructor
  ¬∑ intro sum
    rw [ourMetric] at sum

    have sum_zero : ‚àë' n, (1/2)^n * ‚Äñgs n x - gs n y‚Äñ  = 0 ‚Üí ‚àÄ n, (1/2)^n * ‚Äñgs n x - gs n y‚Äñ  = 0 := by
      have tsum_zero (g : ‚Ñï ‚Üí ‚Ñù) (h : ‚àÄ (i : ‚Ñï), g i ‚â• 0) (h' : Summable g) :
          ‚àë' (i : ‚Ñï), g i = 0 ‚Üî ‚àÄ (i : ‚Ñï), g i = 0 := by
        calc
          _ ‚Üî HasSum g 0 := (Summable.hasSum_iff h').symm
          _ ‚Üî g = 0 := hasSum_zero_iff_of_nonneg h
          _ ‚Üî _ := Function.funext_iff

      intro sum
      let f := fun n ‚Ü¶ (1/2)^n * ‚Äñgs n x - gs n y‚Äñ
      have summable_metric : Summable f := by
        have norm_bdd : ‚àÄ n, ‚Äñgs n x - gs n y‚Äñ  ‚â§ 1 + 1 := by
          exact fun n ‚Ü¶ norm_sub_le_of_le (gs_bdd n x) (gs_bdd n y)
        ring_nf at norm_bdd

        have summable_geom := summable_geometric_two

        have f_mul_summable : Summable (fun n ‚Ü¶ 2 * ((1:‚Ñù) / 2) ^ n) := by
          exact @Summable.mul_left ‚Ñï ‚Ñù _ _ _ (fun n ‚Ü¶ (1 / 2 )^ n) 2 summable_geom

        have summable_if_bounded := @Summable.of_norm_bounded ‚Ñï ‚Ñù _ _
            (fun n ‚Ü¶ (1/2)^n * ‚Äñgs n x - gs n y‚Äñ) (fun n ‚Ü¶ 2 * (1 / 2) ^ n) f_mul_summable

        have : (‚àÄ (i : ‚Ñï), ‚Äñ(fun n ‚Ü¶ (1 / 2) ^ n * ‚Äñgs n x - gs n y‚Äñ) i‚Äñ
            ‚â§ (fun n ‚Ü¶ 2 * (1 / 2) ^ n) i)  := by
          intro i
          simp only [one_div, inv_pow, sub_self, add_zero, norm_mul, norm_inv, norm_pow,
          RCLike.norm_ofNat, norm_norm]
          rw [mul_comm]
          simp only [gt_iff_lt, inv_pos, Nat.ofNat_pos, pow_pos, mul_le_mul_right]
          exact norm_bdd i

        exact summable_if_bounded this

      have terms_pos : ‚àÄ n : ‚Ñï, f n >= 0 := by
        have : ‚àÄ n : ‚Ñï, ‚Äñgs n x - gs n y‚Äñ >= 0 := by
          intro n
          apply norm_nonneg
        intro n
        refine mul_nonneg ?ha (this n)
        norm_num

      have := (tsum_zero (fun n ‚Ü¶ (1/2)^n * ‚Äñgs n x - gs n y‚Äñ) terms_pos summable_metric).mp
      apply this
      exact sum

    apply sum_zero at sum
    simp at sum
    simp_rw [sub_eq_zero] at sum
    contrapose! sum

    have : (‚àÉ f ‚àà Set.range gs, f x ‚â† f y) ‚Üí ‚àÉ a, gs a ‚Üëx ‚â† gs a ‚Üëy := by
      simp only [Set.mem_range, ne_eq, exists_exists_eq_and, imp_self]
    apply this
    apply gs_sep
    exact sum

  ¬∑ intro x_eq_y
    rw [ourMetric, x_eq_y]
    simp

example (g : ‚Ñï ‚Üí ‚Ñù) (h : ‚àÄ (i : ‚Ñï), g i ‚â• 0) (h' : Summable g) :
    ‚àë' (i : ‚Ñï), g i = 0 ‚Üî ‚àÄ (i : ‚Ñï), g i = 0 := by
  calc
    _ ‚Üî HasSum g 0 := (Summable.hasSum_iff h').symm
    _ ‚Üî g = 0 := hasSum_zero_iff_of_nonneg h
    _ ‚Üî _ := Function.funext_iff

#check tsum_eq_zero_iff
#check HasSum.summable
#check HasSum
#check mul_eq_zero
#check @pow_pos ‚Ñù _ (1/2)
#check gs_sep


lemma ourMetric_comm : ‚àÄ x y : X, ourMetric gs x y = ourMetric gs y x := by
  intro x y
  rw [ourMetric, ourMetric]
  have abs_eq : ‚àÄ n, ‚Äñgs n x - gs n y‚Äñ = ‚Äñgs n y - gs n x‚Äñ  := by
    intro n
    exact norm_sub_rev (gs n x) (gs n y)
  rw [tsum_congr]
  intro b
  rw [abs_eq]

lemma ourMetric_triangle : ‚àÄ x y z : X, ourMetric gs x z ‚â§ ourMetric gs x y + ourMetric gs y z := by
  intro x y z
  rw [ourMetric, ourMetric, ourMetric]

  have plusminus_eq_self : ‚àÄ n, ‚Äñgs n x - gs n z‚Äñ  = ‚Äñgs n x + (gs n y - gs n y) - gs n z‚Äñ  := by
    intro n
    simp [sub_self (gs n y)]

  simp_rw [plusminus_eq_self]

  have tri_ineq : ‚àÄ n, (1/2)^n * ‚Äñgs n x + (gs n y - gs n y) - gs n z‚Äñ  ‚â§ (1/2)^n * ‚Äñgs n x - gs n y‚Äñ + (1/2)^n * ‚Äñgs n y - gs n z‚Äñ  := by
    intro n
    rw [‚Üê add_comm_sub, add_sub_assoc (gs n x - gs n y) (gs n y) (gs n z) , ‚Üê mul_add]
    refine (mul_le_mul_left ?_).mpr ?_
    ¬∑ refine pow_pos ?refine_1.H n
      linarith
    ¬∑ exact norm_add_le (gs n x - gs n y) (gs n y - gs n z)

  have tsum_tri_ineq : ‚àë' (n : ‚Ñï), (1 / 2) ^ n * ‚Äñgs n x + (gs n y - gs n y) - gs n z‚Äñ  ‚â§
      ‚àë' (n : ‚Ñï), ((1 / 2) ^ n * ‚Äñgs n x - gs n y‚Äñ + (1 / 2) ^ n * ‚Äñgs n y - gs n z‚Äñ) := by

    apply tsum_le_tsum
    ¬∑ exact tri_ineq
    ¬∑ have abs_plus : ‚àÄ n, ‚Äñgs n x + (gs n y - gs n y) - gs n z‚Äñ  ‚â§ ‚Äñgs n x‚Äñ  + ‚Äñgs n z‚Äñ := by
        intro n
        simp [norm_sub_le (gs n x) (gs n z)]

      have norm_sum_bdd : ‚àÄ n, ‚Äñgs n x‚Äñ + ‚Äñgs n z‚Äñ  ‚â§ 1 + 1 := by
        intro n
        have gs_bdd' := gs_bdd
        specialize gs_bdd n x
        specialize gs_bdd' n z
        exact add_le_add gs_bdd gs_bdd'

      have norm_bdd : ‚àÄ n, ‚Äñgs n x + (gs n y - gs n y) - gs n z‚Äñ  ‚â§ 1 + 1 := by
        exact fun n ‚Ü¶
          Preorder.le_trans ‚Äñgs n x + (gs n y - gs n y) - gs n z‚Äñ (‚Äñgs n x‚Äñ + ‚Äñgs n z‚Äñ) (1 + 1)
            (abs_plus n) (norm_sum_bdd n)
      ring_nf at norm_bdd

      have summable_geom := summable_geometric_two

      have f_mul_summable : Summable (fun n ‚Ü¶ 2 * ((1:‚Ñù) / 2) ^ n) := by
        exact @Summable.mul_left ‚Ñï ‚Ñù _ _ _ (fun n ‚Ü¶ (1 / 2 )^ n) 2 summable_geom

      have summable_if_bounded := @Summable.of_norm_bounded ‚Ñï ‚Ñù _ _
          (fun n ‚Ü¶ (1/2)^n * ‚Äñgs n x + (gs n y - gs n y) - gs n z‚Äñ) (fun n ‚Ü¶ 2 * (1 / 2) ^ n) f_mul_summable

      have : (‚àÄ (i : ‚Ñï), ‚Äñ(fun n ‚Ü¶ (1 / 2) ^ n * ‚Äñgs n x + (gs n y - gs n y) - gs n z‚Äñ) i‚Äñ
          ‚â§ (fun n ‚Ü¶ 2 * (1 / 2) ^ n) i)  := by
        intro i
        simp only [one_div, inv_pow, sub_self, add_zero, norm_mul, norm_inv, norm_pow,
          RCLike.norm_ofNat, norm_norm]
        rw [mul_comm]
        simp only [gt_iff_lt, inv_pos, Nat.ofNat_pos, pow_pos, mul_le_mul_right]
        exact norm_bdd i

      exact summable_if_bounded this

    ¬∑ apply Summable.add
      ¬∑ have norm_bdd : ‚àÄ n, ‚Äñgs n x - gs n y‚Äñ  ‚â§ 1 + 1 := by
          exact fun n ‚Ü¶ norm_sub_le_of_le (gs_bdd n x) (gs_bdd n y)
        ring_nf at norm_bdd

        have summable_geom := summable_geometric_two

        have f_mul_summable : Summable (fun n ‚Ü¶ 2 * ((1:‚Ñù) / 2) ^ n) := by
          exact @Summable.mul_left ‚Ñï ‚Ñù _ _ _ (fun n ‚Ü¶ (1 / 2 )^ n) 2 summable_geom

        have summable_if_bounded := @Summable.of_norm_bounded ‚Ñï ‚Ñù _ _
          (fun n ‚Ü¶ (1/2)^n * ‚Äñgs n x - gs n y‚Äñ) (fun n ‚Ü¶ 2 * (1 / 2) ^ n) f_mul_summable

        have : (‚àÄ (i : ‚Ñï), ‚Äñ(fun n ‚Ü¶ (1 / 2) ^ n * ‚Äñgs n x - gs n y‚Äñ) i‚Äñ
            ‚â§ (fun n ‚Ü¶ 2 * (1 / 2) ^ n) i)  := by
          intro i
          simp only [one_div, inv_pow, sub_self, add_zero, norm_mul, norm_inv, norm_pow,
            RCLike.norm_ofNat, norm_norm]
          rw [mul_comm]
          simp only [gt_iff_lt, inv_pos, Nat.ofNat_pos, pow_pos, mul_le_mul_right]
          exact norm_bdd i

        exact summable_if_bounded this

      ¬∑ have norm_bdd : ‚àÄ n, ‚Äñgs n y - gs n z‚Äñ  ‚â§ 1 + 1 := by
          exact fun n ‚Ü¶ norm_sub_le_of_le (gs_bdd n y) (gs_bdd n z)
        ring_nf at norm_bdd

        have summable_geom := summable_geometric_two

        have f_mul_summable : Summable (fun n ‚Ü¶ 2 * ((1:‚Ñù) / 2) ^ n) := by
          exact @Summable.mul_left ‚Ñï ‚Ñù _ _ _ (fun n ‚Ü¶ (1 / 2 )^ n) 2 summable_geom

        have summable_if_bounded := @Summable.of_norm_bounded ‚Ñï ‚Ñù _ _
            (fun n ‚Ü¶ (1/2)^n * ‚Äñgs n y - gs n z‚Äñ) (fun n ‚Ü¶ 2 * (1 / 2) ^ n) f_mul_summable

        have : (‚àÄ (i : ‚Ñï), ‚Äñ(fun n ‚Ü¶ (1 / 2) ^ n * ‚Äñgs n y - gs n z‚Äñ) i‚Äñ
            ‚â§ (fun n ‚Ü¶ 2 * (1 / 2) ^ n) i)  := by
          intro i
          simp only [one_div, inv_pow, sub_self, add_zero, norm_mul, norm_inv, norm_pow,
            RCLike.norm_ofNat, norm_norm]
          rw [mul_comm]
          simp only [gt_iff_lt, inv_pos, Nat.ofNat_pos, pow_pos, mul_le_mul_right]
          exact norm_bdd i

        exact summable_if_bounded this

  have pm : ‚àÄ n : ‚Ñï, ‚Äñgs n x + -gs n y‚Äñ = ‚Äñgs n x -gs n y‚Äñ := by simp[sub_eq_add_neg]

  have fsummable : Summable fun n ‚Ü¶ (1 / 2) ^ n * ‚Äñgs n x - gs n y‚Äñ := by
    have norm_bdd : ‚àÄ n, ‚Äñgs n x - gs n y‚Äñ  ‚â§ 1 + 1 := by
        exact fun n ‚Ü¶ norm_sub_le_of_le (gs_bdd n x) (gs_bdd n y)
    ring_nf at norm_bdd

    have summable_geom := summable_geometric_two

    have f_mul_summable : Summable (fun n ‚Ü¶ 2 * ((1:‚Ñù) / 2) ^ n) := by
      exact @Summable.mul_left ‚Ñï ‚Ñù _ _ _ (fun n ‚Ü¶ (1 / 2 )^ n) 2 summable_geom

    have summable_if_bounded := @Summable.of_norm_bounded ‚Ñï ‚Ñù _ _
        (fun n ‚Ü¶ (1/2)^n * ‚Äñgs n x - gs n y‚Äñ) (fun n ‚Ü¶ 2 * (1 / 2) ^ n) f_mul_summable

    have : (‚àÄ (i : ‚Ñï), ‚Äñ(fun n ‚Ü¶ (1 / 2) ^ n * ‚Äñgs n x - gs n y‚Äñ) i‚Äñ
          ‚â§ (fun n ‚Ü¶ 2 * (1 / 2) ^ n) i)  := by
        intro i
        simp only [one_div, inv_pow, sub_self, add_zero, norm_mul, norm_inv, norm_pow,
          RCLike.norm_ofNat, norm_norm]
        rw [mul_comm]
        simp only [gt_iff_lt, inv_pos, Nat.ofNat_pos, pow_pos, mul_le_mul_right]
        exact norm_bdd i

    exact summable_if_bounded this

  have gsummable : Summable fun n ‚Ü¶ (1 / 2) ^ n * ‚Äñgs n y - gs n z‚Äñ := by
    have norm_bdd : ‚àÄ n, ‚Äñgs n y - gs n z‚Äñ  ‚â§ 1 + 1 := by
        exact fun n ‚Ü¶ norm_sub_le_of_le (gs_bdd n y) (gs_bdd n z)
    ring_nf at norm_bdd

    have summable_geom := summable_geometric_two

    have f_mul_summable : Summable (fun n ‚Ü¶ 2 * ((1:‚Ñù) / 2) ^ n) := by
        exact @Summable.mul_left ‚Ñï ‚Ñù _ _ _ (fun n ‚Ü¶ (1 / 2 )^ n) 2 summable_geom

    have summable_if_bounded := @Summable.of_norm_bounded ‚Ñï ‚Ñù _ _
          (fun n ‚Ü¶ (1/2)^n * ‚Äñgs n y - gs n z‚Äñ) (fun n ‚Ü¶ 2 * (1 / 2) ^ n) f_mul_summable

    have : (‚àÄ (i : ‚Ñï), ‚Äñ(fun n ‚Ü¶ (1 / 2) ^ n * ‚Äñgs n y - gs n z‚Äñ) i‚Äñ
          ‚â§ (fun n ‚Ü¶ 2 * (1 / 2) ^ n) i)  := by
        intro i
        simp only [one_div, inv_pow, sub_self, add_zero, norm_mul, norm_inv, norm_pow,
          RCLike.norm_ofNat, norm_norm]
        rw [mul_comm]
        simp only [gt_iff_lt, inv_pos, Nat.ofNat_pos, pow_pos, mul_le_mul_right]
        exact norm_bdd i

    exact summable_if_bounded this

  have tsum_add_ineq : ‚àë' (n : ‚Ñï), ((1 / 2) ^ n * ‚Äñgs n x - gs n y‚Äñ + (1 / 2) ^ n * ‚Äñgs n y - gs n z‚Äñ) =
      ‚àë' (n : ‚Ñï), (1 / 2) ^ n * ‚Äñgs n x - gs n y‚Äñ + ‚àë' (n : ‚Ñï), (1 / 2)^ n * ‚Äñgs n y - gs n z‚Äñ := by
    rw [tsum_add fsummable gsummable]

  rw [tsum_add_ineq] at tsum_tri_ineq
  exact tsum_tri_ineq

--#check le_trans
#check Summable.of_norm_bounded
#check @summable_geometric_iff_norm_lt_one
#check Summable.const_smul
#check tsum_add



noncomputable def ourMetricSpace : MetricSpace X where
  dist := ourMetric gs
  dist_self := by
    intro x
    exact (@ourMetric_self_iff X ùïú _ gs gs_sep gs_bdd x x ).mpr rfl
  dist_comm := by
    intro x y
    exact (@ourMetric_comm X ùïú _ gs x y)
  dist_triangle := by
    intro x y z
    exact (@ourMetric_triangle X ùïú _ gs gs_bdd x y z)
  edist_dist := by simp [‚Üê ENNReal.ofReal_coe_nnreal]
  eq_of_dist_eq_zero := by
    intro x y
    exact (@ourMetric_self_iff X ùïú _ gs gs_sep gs_bdd x y).mp

def kopio (X :Type*) (gs : ‚Ñï ‚Üí X ‚Üí ùïú) (gs_sep : Set.SeparatesPoints (Set.range gs)) (gs_bdd : ‚àÄ n x, ‚Äñgs n x‚Äñ ‚â§ 1) := X

def kopio.mk (X :Type*) (gs : ‚Ñï ‚Üí X ‚Üí ùïú) (gs_sep : Set.SeparatesPoints (Set.range gs)) (gs_bdd : ‚àÄ n x, ‚Äñgs n x‚Äñ ‚â§ 1) :
    X ‚Üí kopio  X gs gs_sep gs_bdd := id

def kopio.toOrigin (X :Type*) (gs : ‚Ñï ‚Üí X ‚Üí ùïú) (gs_sep : Set.SeparatesPoints (Set.range gs)) (gs_bdd : ‚àÄ n x, ‚Äñgs n x‚Äñ ‚â§ 1) :
    kopio X gs gs_sep gs_bdd ‚Üí X := id

noncomputable instance : MetricSpace (kopio X gs gs_sep gs_bdd) := ourMetricSpace gs gs_sep gs_bdd


lemma cont_kopio_mk (X :Type*) [TopologicalSpace X] [CompactSpace X] (gs : ‚Ñï ‚Üí X ‚Üí ùïú) (gs_sep : Set.SeparatesPoints (Set.range gs)) (gs_bdd : ‚àÄ n x, ‚Äñgs n x‚Äñ ‚â§ 1) :
    Continuous (kopio.mk X gs gs_sep gs_bdd) := by
  dsimp [kopio.mk]
  refine { isOpen_preimage := ?isOpen_preimage }
  intro hs hos

  --refine isOpen_coinduced.mp ?isOpen_preimage.a




  --‚ÄπTopologicalSpace X‚Ä∫
  sorry



  /-
  rw[kopio.mk]
  refine { isOpen_preimage := ?isOpen_preimage }
  intro s openS
  refine isOpen_coinduced.mp ?isOpen_preimage.a
-/



lemma cont_kopio_toOrigin (X :Type*) [TopologicalSpace X] [CompactSpace X] (gs : ‚Ñï ‚Üí X ‚Üí ùïú) (gs_sep : Set.SeparatesPoints (Set.range gs)) (gs_bdd : ‚àÄ n x, ‚Äñgs n x‚Äñ ‚â§ 1) :
    Continuous (kopio.toOrigin X gs gs_sep gs_bdd) := by
    rw [kopio.toOrigin]
    refine continuous_id_of_le ?_
    refine le_of_nhds_le_nhds ?h
    intro hk

    sorry

#check continuous_id
#check TopologicalSpace.coinduced id ‚ÄπTopologicalSpace X‚Ä∫
#check UniformSpace.toTopologicalSpace
#check @UniformSpace.toTopologicalSpace_mono X

noncomputable def homeomorph_OurMetric :
  X ‚âÉ‚Çú kopio X gs gs_sep gs_bdd where
    toFun := kopio.mk X gs gs_sep gs_bdd
    invFun := kopio.toOrigin X gs gs_sep gs_bdd
    left_inv := by exact congrFun rfl
    right_inv := by exact congrFun rfl
    continuous_toFun := by exact cont_kopio_mk X gs gs_sep gs_bdd
    continuous_invFun := by exact cont_kopio_toOrigin X gs gs_sep gs_bdd


--#check X ‚âÉ‚Çú ourMetricSpace gs
#check ourMetricSpace gs

/- If X is compact, and there exists a seq of continuous real-valued functions that
separates points on X, then X is metrizable. -/
lemma X_metrizable (X ùïú : Type*) [NormedField ùïú] [TopologicalSpace X] [CompactSpace X]
    (gs : ‚Ñï ‚Üí X ‚Üí ùïú) (gs_cont : ‚àÄ n, Continuous (gs n))
    (gs_sep : Set.SeparatesPoints (Set.range gs)): --(gs_bdd : ‚àÄ n x, ‚Äñgs n x‚Äñ ‚â§ 1) : --gs_bdd ei pit√§isi tarvita
    TopologicalSpace.MetrizableSpace X := by
  --refine ‚ü®?_‚ü©
  have hom := @homeomorph_OurMetric X ùïú _ _ _ gs gs_sep --gs_bdd
  --have induced_eq := @Homeomorph.induced_eq X (kopio X gs gs_sep gs_bdd) _ _ hom
  --have induced := @inducing_induced X (kopio X gs gs_sep gs_bdd) _ hom
  --have psm := @TopologicalSpace.MetrizableSpace.toPseudoMetrizableSpace (kopio X gs gs_sep gs_bdd) _ _
  --have := @Inducing.pseudoMetrizableSpace X (kopio X gs gs_sep gs_bdd) _ _ _ hom


  --apply this at psm

  --have foo := @Inducing.pseudoMetrizableSpace X
  --let MetrizableSpace X := @TopologicalSpace.metrizableSpaceMetric X
  --rw [induced_eq] at induced
  --refine ‚ü®?_‚ü©
  --hom.inducing.metrizableSpace
  --rw [Homeomorph.inducing this]
  --#check @TopologicalSpace.MetrizableSpace.toPseudoMetrizableSpace (kopio X gs gs_sep gs_bdd) _ _
  #check @Inducing.pseudoMetrizableSpace -- X (kopio X gs gs_sep gs_bdd) _ _ _ hom
  sorry
/-
letI : PseudoMetricSpace X := TopologicalSpace.pseudoMetrizableSpacePseudoMetric X
  (homeomorph_probabilityMeasure_levyProkhorov (Œ© := X)).inducing.pseudoMetrizableSpace
-/

#check Set.range gs
#check Set.SeparatesPoints (Set.range gs)
#check X_metrizable
variable (x y : X)
#check @tsum ‚Ñù _ _ ‚Ñï (fun n ‚Ü¶ 1/2^n * ‚Äñgs n x - gs n y‚Äñ)
#check tsum (fun n ‚Ü¶ 1/2^n * ‚Äñgs n x - gs n y‚Äñ)
#check @ENNReal.tsum_eq_zero
#check IsAbsoluteValue.abv_sub
#check TopologicalSpace.MetrizableSpace
#check TopologicalSpace.MetrizableSpace X
#check MeasureTheory.LevyProkhorov
#check @Inducing.pseudoMetrizableSpace X (kopio X gs gs_sep gs_bdd) _ _ _
#check Homeomorph.induced_eq


end Metrizability_lemma

section Seq_Banach_Alaoglu

--variable (ùïú : Type*)
variable (V : Type*) [SeminormedAddCommGroup V] [NormedSpace ‚ÑÇ V]
variable [TopologicalSpace.SeparableSpace V]
variable (K : Set (WeakDual ‚ÑÇ V)) (K_cpt : IsCompact K)
/-
example (œï : WeakDual ‚ÑÇ V) (v : V) : False := by
  set a := œï v

  sorry-/
/- There exists a sequence of continuous functions that separates points on V*. -/
lemma exists_gs : ‚àÉ (gs : ‚Ñï ‚Üí (WeakDual ‚ÑÇ V) ‚Üí ‚ÑÇ), (‚àÄ n, Continuous (gs n)) ‚àß Set.SeparatesPoints (Set.range gs) := by
  set vs := TopologicalSpace.denseSeq V
  set gs : ‚Ñï ‚Üí K ‚Üí ‚ÑÇ := fun n ‚Ü¶ fun œï ‚Ü¶ (œï : WeakDual ‚ÑÇ V) (vs n)
  --have ‚ü®h1, h2, h3‚ü© := ‚àÉ (gs : ‚Ñï ‚Üí (WeakDual ‚ÑÇ V) ‚Üí ‚ÑÇ), (‚àÄ n, Continuous (gs n)) ‚àß Set.SeparatesPoints (Set.range gs)
  set gs2 : ‚Ñï ‚Üí WeakDual ‚ÑÇ V ‚Üí ‚ÑÇ := fun n ‚Ü¶ fun œï ‚Ü¶ (œï : WeakDual ‚ÑÇ V) (vs n)
  use gs2
  constructor
  ¬∑ exact fun n ‚Ü¶ WeakDual.eval_continuous (vs n)
  ¬∑ intro w y w_ne_y

    sorry


  /-refine Exists.intro ?w ?h
  ¬∑ exact fun a a ‚Ü¶ Complex.I
  ¬∑ refine ‚ü®?h.left, ?h.right‚ü©
    ¬∑ exact fun n ‚Ü¶ continuous_const
    ¬∑ intro x y x_ne_y
      sorry
-/
#check @TopologicalSpace.exists_countable_dense (WeakDual ‚ÑÇ V) _
#check @DenseRange.equalizer
--#check Continuous.comp (WeakDual.eval_continuous (vs n)) continuous_subtype_val



/- A compact subset of the dual V* of a separable space V is metrizable. -/
lemma subset_metrizable : TopologicalSpace.MetrizableSpace K := by
  have k_cpt' : CompactSpace K := by exact isCompact_iff_compactSpace.mp K_cpt
  have := exists_gs V K
  obtain ‚ü®gs, gs_cont, gs_sep‚ü© := this
  let hs : ‚Ñï ‚Üí K ‚Üí ‚ÑÇ := fun n ‚Ü¶ fun œï ‚Ü¶ gs n (œï : WeakDual ‚ÑÇ V)
  apply X_metrizable K ‚ÑÇ hs
  ¬∑ intro n
    exact Continuous.comp (gs_cont n) continuous_subtype_val
  ¬∑ intro x y x_ne_y
    refine exists_exists_eq_and.mpr ?intro.intro.gs_sep.a
    unfold_let
    have subst : ‚àÄ a : ‚Ñï, (fun n œï ‚Ü¶ gs n ‚Üëœï) a x ‚â† (fun n œï ‚Ü¶ gs n ‚Üëœï) a y ‚Üí gs a x ‚â† gs a y := by
      exact fun a a ‚Ü¶ a
    simp only [subst]
    have : (‚àÉ f ‚àà Set.range gs, f x ‚â† f y) ‚Üí ‚àÉ a, gs a ‚Üëx ‚â† gs a ‚Üëy := by
      simp only [Set.mem_range, ne_eq, exists_exists_eq_and, imp_self]
    apply this
    apply gs_sep
    exact Subtype.coe_ne_coe.mpr x_ne_y

#check X_metrizable
#check Continuous.restrict
#check @WeakDual.toNormedDual ‚ÑÇ _ V _ _
#check Subalgebra.SeparatesPoints

/- The closed unit ball is sequentially compact in V* if V is separable. -/
theorem WeakDual.isSeqCompact_closedBall (x' : NormedSpace.Dual ‚ÑÇ V) (r : ‚Ñù) :
    IsSeqCompact (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) := by

  have b_isCompact : IsCompact (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) := by
    apply WeakDual.isCompact_closedBall
  have b_isCompact' : CompactSpace (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) := by
    exact isCompact_iff_compactSpace.mp b_isCompact

  have b_isMetrizable : TopologicalSpace.MetrizableSpace (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) := by
    exact subset_metrizable V (‚áëtoNormedDual ‚Åª¬π' Metric.closedBall x' r) b_isCompact

  have seq_cpt_space := @FirstCountableTopology.seq_compact_of_compact (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r)
      _ _ b_isCompact'
  --have seq_cpt := (@seqCompactSpace_iff (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) _ ).mp seq_cpt_space

  have seq_cont_phi : SeqContinuous (fun œÜ : (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) ‚Ü¶ (œÜ : WeakDual ‚ÑÇ V)) := by
    refine continuous_iff_seqContinuous.mp ?_
    exact continuous_subtype_val

  have seq_incl := @SeqCompactSpace.range (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r)
                  (WeakDual ‚ÑÇ V) _ _ _ (fun œÜ ‚Ü¶ œÜ) seq_cont_phi
  convert seq_incl




  simp only [Subtype.range_coe_subtype, Set.mem_preimage, coe_toNormedDual, Metric.mem_closedBall]
  rfl
  --sorry




#check Continuous.seqContinuous
#check IsSeqCompact
#check Module.Dual
#check WeakDual ‚ÑÇ V
#check Set (WeakDual ‚ÑÇ V)
#check IsCompact
#check @UniformSpace.isCompact_iff_isSeqCompact
#check IsCompact.isSeqCompact
#check TopologicalSpace.exists_countable_dense
#check subset_metrizable

end Seq_Banach_Alaoglu
/-
section inducing
variable (X Y : Type*) [TopologicalSpace X] [TopologicalSpace Y]
theorem _root_.Inducing.MetrizableSpace [TopologicalSpace.MetrizableSpace Y] {f : X ‚Üí Y}
    (hf : Inducing f) : TopologicalSpace.MetrizableSpace X := by

    sorry
end inducing
-/
