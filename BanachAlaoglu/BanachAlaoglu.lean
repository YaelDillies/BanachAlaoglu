
import Mathlib
section Seq_cpt_continuity

--variable (ys : ‚Ñï ‚Üí f '' K)


lemma IsSeqCompact.image {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] (f : X ‚Üí Y)
    (hf : SeqContinuous f) {K : Set X} (hK : IsSeqCompact K) : IsSeqCompact (f '' K) := by
  rw [IsSeqCompact]
  intro ys hy

  --#check ys n
  sorry

example {X : Type*} [TopologicalSpace X] [SeqCompactSpace X] : IsSeqCompact (Set.univ : Set X) := by
  exact (seqCompactSpace_iff X).mp ‚ÄπSeqCompactSpace X‚Ä∫

lemma SeqCompactSpace.range {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] [SeqCompactSpace X]
    (f : X ‚Üí Y) (hf : SeqContinuous f) : IsSeqCompact (Set.range f) := by
  --refine ?_
  set n := ‚Ñï
  set xs := ‚Ñï ‚Üí X
  set ys := ‚Ñï ‚Üí Y --:= fun n ‚Ü¶ f xs n

 -- have ys_f_xs : ‚àÄ n : ‚Ñï, (ys n) = f (xs n)
  --apply SeqCompactSpace.tendsto_subseq at xs
  --set ys : ‚Ñï ‚Üí Y := fun n ‚Ü¶ f xs n
  --#check xs
  --let := ‚àÄ n, ys n = f xs n
  sorry

#check SeqCompactSpace
#check IsSeqCompact
#check @SeqCompactSpace.tendsto_subseq
--#check fun n ‚Ü¶ (xs n)

end Seq_cpt_continuity



section Metrizability_lemma
--set_option diagnostics true

variable {X : Type*} [TopologicalSpace X] [CompactSpace X]
--variable (g : X ‚Üí ‚Ñù) (g_cont : Continuous g)
variable (gs : ‚Ñï ‚Üí X ‚Üí ‚Ñù)
variable (gs_cont : ‚àÄ n, Continuous (gs n))
variable (gs_sep : Set.SeparatesPoints (Set.range gs))
variable (gs_bdd : ‚àÄ n x, |gs n x| ‚â§ 1)

noncomputable def ourMetric (x y : X) : ‚Ñù :=
  ‚àë' n, 1/2^n * |gs n x - gs n y|

lemma ourMetric_self_iff : ‚àÄ {x y : X}, ourMetric gs x y = 0 ‚Üî x = y := by
  intro x y
  constructor
  { intro sum
    rw [ourMetric] at sum

    have sum_zero : ‚àë' n, 1/2^n * |gs n x - gs n y| = 0 ‚Üí ‚àÄ n, 1/2^n * |gs n x - gs n y| = 0 := by
      intro sum
      have summable_metric : ‚àÄ x y, Summable (fun n ‚Ü¶ 1/2^n * |gs n x - gs n y|) := by sorry
      --have tsum_zero := @tsum_eq_zero_iff ‚Ñï ‚Ñù _ _ _ (fun n ‚Ü¶ 1/2^n * |gs n x - gs n y|) summable_metric
      ¬∑ sorry
      ¬∑ sorry

      --apply tsum_zero.mpr at sum

    apply sum_zero at sum
    -- gs_sep
    have mul_zero : ‚àÄ a b : ‚Ñù , a * b = 0 ‚Üî a = 0 ‚à® b = 0 := by
      exact fun a b ‚Ü¶ mul_eq_zero


    have mul_const_eq_zero : ‚àÄ (n : ‚Ñï), 1 / 2 ^ n * |gs n x - gs n y| = 0 ‚Üí |gs n x - gs n y| = 0 := by
      intro n
      intro sum
      rw [mul_zero (1 / 2 ^ n) (|gs n x - gs n y|)] at sum
      sorry
      --apply mul_eq_zero at sum
    --abs_eq_zero
    --apply sum_zero at mul_const_eq_zero
    have foo : ‚àÄ n, |gs n x - gs n y| = 0 := by
      intro n
      apply mul_const_eq_zero
      specialize sum n
      exact sum

    simp at sum
    simp_rw [sub_eq_zero] at sum
    have eq_sep : ‚àÄ (n : ‚Ñï), gs n x = gs n y ‚Üí x = y := by sorry

    sorry
    }
  { intro x_eq_y
    rw [ourMetric, x_eq_y]
    simp
  }
#check tsum_eq_zero_iff
#check HasSum.summable
#check HasSum
#check mul_eq_zero

lemma ourMetric_comm : ‚àÄ x y : X, ourMetric gs x y = ourMetric gs y x := by
  intro x y
  rw [ourMetric, ourMetric]
  have abs_eq : ‚àÄ n, |gs n x - gs n y| = |gs n y - gs n x| := by
    exact fun n ‚Ü¶ abs_sub_comm (gs n x) (gs n y)
  rw [tsum_congr]
  intro b
  rw [abs_eq]


lemma ourMetric_triangle : ‚àÄ x y z : X, ourMetric gs x z ‚â§ ourMetric gs x y + ourMetric gs y z := by
  intro x y z
  rw [ourMetric, ourMetric, ourMetric]
/-
  have plusminus_eq_zero : ‚àÄ n, gs n y - gs n y = 0 := by
    intro n
    rw[sub_self (gs n y)]
-/
  have plusminus_eq_self : ‚àÄ n, |gs n x - gs n z| = |gs n x + (gs n y - gs n y) - gs n z| := by
    intro n
    simp [sub_self (gs n y)]
    --specialize plusminus_eq_zero n
    --rw[plusminus_eq_zero, add_zero]

  simp_rw [plusminus_eq_self]

  have tri_ineq : ‚àÄ n, 1/2^n * |gs n x + (gs n y - gs n y) - gs n z| ‚â§ 1/2^n * |gs n x - gs n y| + 1/2^n * |gs n y - gs n z| := by
    intro n
    rw [‚Üê add_comm_sub, add_sub_assoc (gs n x - gs n y) (gs n y) (gs n z), ‚Üê mul_add]
    refine (mul_le_mul_left ?_).mpr ?_
    ¬∑ refine one_div_pos.mpr ?refine_1.a
      refine pow_pos ?refine_1.a.H n
      linarith
    ¬∑ apply abs_add (gs n x - gs n y) (gs n y - gs n z)

  have tsum_tri_ineq : ‚àë' (n : ‚Ñï), 1 / 2 ^ n * |gs n x + (gs n y - gs n y) - gs n z| ‚â§
      ‚àë' (n : ‚Ñï), (1 / 2 ^ n * |gs n x + - gs n y| + 1 / 2 ^ n * |gs n y - gs n z|) := by
    --simp_rw[tri_eq]
    apply tsum_le_tsum
    ¬∑ exact tri_ineq
    ¬∑ have abs_plus : ‚àÄ n, |gs n x + (gs n y - gs n y) - gs n z| ‚â§ |gs n x| + |gs n z| := by
        intro n
        simp [abs_sub (gs n x) (gs n z)]
      --specialize gs_bdd n x

      have foo : ‚àÄ n, |gs n x| + |gs n z| ‚â§ 1 + 1 := by
        intro n
        have gs_bdd' := gs_bdd
        specialize gs_bdd n x
        specialize gs_bdd' n z
        exact add_le_add gs_bdd gs_bdd'

      have foo2 : ‚àÄ n, |gs n x + (gs n y - gs n y) - gs n z| ‚â§ 1 + 1 :=
        le_trans
      sorry

      --refine le_trans ?_ abs_plus foo
      --refine le_trans (|gs n x + (gs n y - gs n y) - gs n z|) (|gs n x| + |gs n z|) (1 + 1)
       --[foo] at abs_plus
      --#check le_trans (|gs n x + (gs n y - gs n y) - gs n z|) (|gs n x| + |gs n z|) (1 + 1)
      have abs_plus_ub :  ‚àÄ n, |gs n x + (gs n y - gs n y) - gs n z| ‚â§ 2 := by



       sorry
      --let f : ‚Ñï ‚Üí  := 1 / 2 ^ i * |gs i x + (gs i y - gs i y) - gs i z|
     --have hassum : ‚àÉ i, HasSum (1 / 2 ^ i * |gs i x + (gs i y - gs i y) - gs i z|)

      sorry
    ¬∑ sorry

      --summable_of_norm_bounded
      --summable_geometric_iff_norm_lt_1

  have tsum_add_ineq : ‚àë' (n : ‚Ñï), (1 / 2 ^ n * |gs n x + - gs n y| + 1 / 2 ^ n * |gs n y - gs n z|) =
      ‚àë' (n : ‚Ñï), 1 / 2 ^ n * |gs n x - gs n y| + ‚àë' (n : ‚Ñï), 1 / 2 ^ n * |gs n y - gs n z| := by
    apply tsum_add
    ¬∑ sorry
    ¬∑
      sorry


  rw [tsum_add_ineq] at tsum_tri_ineq
  exact tsum_tri_ineq

#check le_trans


noncomputable def ourMetricSpace : MetricSpace X where
  dist := ourMetric gs
  dist_self := by
    intro x
    exact (@ourMetric_self_iff X gs x x ).mpr rfl
  dist_comm := by
    intro x y
    exact (@ourMetric_comm X gs x y)
  dist_triangle := by
    intro x y z
    exact (@ourMetric_triangle X gs x y z)
  edist_dist := by simp [‚Üê ENNReal.ofReal_coe_nnreal]
  eq_of_dist_eq_zero := by
    intro x y
    exact (@ourMetric_self_iff X gs x y).mp

def kopio (X :Type*) (gs : ‚Ñï ‚Üí X ‚Üí ‚Ñù) (gs_sep : Set.SeparatesPoints (Set.range gs)) (gs_bdd : ‚àÄ n x, |gs n x| ‚â§ 1) := X

def kopio.mk (X :Type*) (gs : ‚Ñï ‚Üí X ‚Üí ‚Ñù) (gs_sep : Set.SeparatesPoints (Set.range gs)) (gs_bdd : ‚àÄ n x, |gs n x| ‚â§ 1) :
    X ‚Üí kopio  X gs gs_sep gs_bdd := id

def kopio.toOrigin (X :Type*) (gs : ‚Ñï ‚Üí X ‚Üí ‚Ñù) (gs_sep : Set.SeparatesPoints (Set.range gs)) (gs_bdd : ‚àÄ n x, |gs n x| ‚â§ 1) :
    kopio X gs gs_sep gs_bdd ‚Üí X := id

noncomputable instance : MetricSpace (kopio X gs gs_sep gs_bdd) := ourMetricSpace gs


lemma cont_kopio_mk (X :Type*) [TopologicalSpace X] [CompactSpace X] (gs : ‚Ñï ‚Üí X ‚Üí ‚Ñù) (gs_sep : Set.SeparatesPoints (Set.range gs)) (gs_bdd : ‚àÄ n x, |gs n x| ‚â§ 1) :
    Continuous (kopio.mk X gs gs_sep gs_bdd) := by sorry

lemma cont_kopio_toOrigin (X :Type*) [TopologicalSpace X] [CompactSpace X] (gs : ‚Ñï ‚Üí X ‚Üí ‚Ñù) (gs_sep : Set.SeparatesPoints (Set.range gs)) (gs_bdd : ‚àÄ n x, |gs n x| ‚â§ 1) :
    Continuous (kopio.toOrigin X gs gs_sep gs_bdd) := by sorry

noncomputable def homeomorph_OurMetric :
  X ‚âÉ‚Çú kopio X gs gs_sep gs_bdd where
    toFun := kopio.mk X gs gs_sep gs_bdd
    invFun := kopio.toOrigin X gs gs_sep gs_bdd
    left_inv := by exact congrFun rfl
    right_inv := by exact congrFun rfl
    continuous_toFun := by exact cont_kopio_mk X gs gs_sep gs_bdd
    continuous_invFun := by exact cont_kopio_toOrigin X gs gs_sep gs_bdd
/-
noncomputable def homeomorph_OurMetric :
    ProbabilityMeasure Œ© ‚âÉ‚Çú LevyProkhorov (ProbabilityMeasure Œ©) where
  toFun := ProbabilityMeasure.toLevyProkhorov (Œ© := Œ©)
  invFun := LevyProkhorov.toProbabilityMeasure (Œ© := Œ©)
  left_inv := congrFun rfl
  right_inv := congrFun rfl
  continuous_toFun := ProbabilityMeasure.continuous_toLevyProkhorov
  continuous_invFun := LevyProkhorov.continuous_toProbabilityMeasure
-/

--#check X ‚âÉ‚Çú ourMetricSpace gs
#check ourMetricSpace gs

/- If X is compact, and there exists a seq of continuous real-valued functions that
separates points on X, then X is metrizable. -/
lemma X_metrizable (X ùïú : Type*) [NormedField ùïú] [TopologicalSpace X] [CompactSpace X]
    (gs : ‚Ñï ‚Üí X ‚Üí ùïú) (gs_cont : ‚àÄ n, Continuous (gs n))
    (gs_sep : Set.SeparatesPoints (Set.range gs)) :
    TopologicalSpace.MetrizableSpace X := by
  --refine ‚ü®?_‚ü©
  have := @homeomorph_OurMetric X _ _ gs gs_sep gs_bdd


  sorry
/-
instance (X : Type*) [TopologicalSpace X] [MetrizableSpace X] [SeparableSpace X]
    [MeasurableSpace X] [OpensMeasurableSpace X] :
    PseudoMetrizableSpace (ProbabilityMeasure X) :=
  letI : PseudoMetricSpace X := TopologicalSpace.pseudoMetrizableSpacePseudoMetric X
  (homeomorph_probabilityMeasure_levyProkhorov (Œ© := X)).inducing.pseudoMetrizableSpace
-/


#check Set.range gs
#check Set.SeparatesPoints (Set.range gs)
#check X_metrizable
variable (x y : X)
#check @tsum ‚Ñù _ _ ‚Ñï (fun n ‚Ü¶ 1/2^n * |gs n x - gs n y|)
#check tsum (fun n ‚Ü¶ 1/2^n * |gs n x - gs n y|)
#check @ENNReal.tsum_eq_zero
#check IsAbsoluteValue.abv_sub
#check TopologicalSpace.MetrizableSpace
#check TopologicalSpace.MetrizableSpace X
#check MeasureTheory.LevyProkhorov
#check Summable


end Metrizability_lemma

section Seq_Banach_Alaoglu

--variable (ùïú : Type*)
variable (V : Type*) [SeminormedAddCommGroup V] [NormedSpace ‚ÑÇ V]
variable [TopologicalSpace.SeparableSpace V]
variable (K : Set (WeakDual ‚ÑÇ V)) (K_cpt : IsCompact K)

example (œï : WeakDual ‚ÑÇ V) (v : V) : False := by
  set a := œï v

  sorry
/- There exists a sequence of continuous functions that separates points on V*. -/
lemma exists_gs : ‚àÉ (gs : ‚Ñï ‚Üí (WeakDual ‚ÑÇ V) ‚Üí ‚ÑÇ), (‚àÄ n, Continuous (gs n)) ‚àß Set.SeparatesPoints (Set.range gs) := by
  set vs := TopologicalSpace.denseSeq V
  set gs : ‚Ñï ‚Üí K ‚Üí ‚ÑÇ := fun n ‚Ü¶ fun œï ‚Ü¶ (œï : WeakDual ‚ÑÇ V) (vs n)
  constructor
  -- TopologicalSpace.exists_countable_dense
  --exact Continuous.comp (WeakDual.eval_continuous (vs n)) continuous_subtype_val
  sorry


/- A compact subset of the dual V* of a separable space V is metrizable. -/
lemma subset_metrizable : TopologicalSpace.MetrizableSpace K := by
  have k_cpt' : CompactSpace K := by
    exact isCompact_iff_compactSpace.mp K_cpt
  set vs := TopologicalSpace.denseSeq V
  have := exists_gs V K
  obtain ‚ü®gs, gs_cont, gs_sep‚ü© := this
  set hs : ‚Ñï ‚Üí K ‚Üí ‚ÑÇ := fun n ‚Ü¶ fun œï ‚Ü¶ gs n (œï : WeakDual ‚ÑÇ V)

  apply X_metrizable K ‚ÑÇ hs
  ¬∑ intro n
    exact Continuous.comp (gs_cont n) continuous_subtype_val
    /-have phi_c : Continuous fun œï ‚Ü¶ (œï : WeakDual ‚ÑÇ V) (vs n) := by
      exact WeakDual.eval_continuous (vs n)-/
    /-have := @Continuous.comp K (WeakDual ‚ÑÇ V) ‚ÑÇ _ _ _ (fun œà ‚Ü¶ œà) (fun œï ‚Ü¶ (œï : WeakDual ‚ÑÇ V) (vs n)) phi_c (by exact
      continuous_subtype_val)-/
  ¬∑



    --have exists_sep : ‚àÉ (gs : ‚Ñï ‚Üí (WeakDual ‚ÑÇ V) ‚Üí ‚ÑÇ), Set.SeparatesPoints (Set.range gs) := by
    sorry
#check Continuous.restrict
#check @WeakDual.toNormedDual ‚ÑÇ _ V _ _

/- The closed unit ball is sequentially compact in V* if V is separable. -/
theorem WeakDual.isSeqCompact_closedBall (x' : NormedSpace.Dual ‚ÑÇ V) (r : ‚Ñù) :
    IsSeqCompact (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) := by

  --let B := (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r)
  --let Œπ : (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) ‚Üí WeakDual ‚ÑÇ V := fun œï ‚Ü¶ œï

  have b_isCompact : IsCompact (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) := by
    apply WeakDual.isCompact_closedBall
  have b_isCompact' : CompactSpace (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) := by
    exact isCompact_iff_compactSpace.mp b_isCompact

  have b_isMetrizable : TopologicalSpace.MetrizableSpace (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) := by
    exact subset_metrizable V (‚áëtoNormedDual ‚Åª¬π' Metric.closedBall x' r) b_isCompact

  have seq_cpt_space := @FirstCountableTopology.seq_compact_of_compact (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r)
      _ _ b_isCompact'
  --have seq_cpt := (@seqCompactSpace_iff (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) _ ).mp seq_cpt_space

  have seq_cont_phi : SeqContinuous (fun œÜ : (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r) ‚Ü¶ (œÜ : WeakDual ‚ÑÇ V)) := by
    refine continuous_iff_seqContinuous.mp ?_
    exact continuous_subtype_val

  have seq_incl := @SeqCompactSpace.range (WeakDual.toNormedDual ‚Åª¬π' Metric.closedBall x' r)
                  (WeakDual ‚ÑÇ V) _ _ _ (fun œÜ ‚Ü¶ œÜ) seq_cont_phi
  convert seq_incl
  --constructor
  --¬∑ exact fun a ‚Ü¶ seq_incl
  --¬∑ rw [seqCompactSpace_iff]



  simp only [Subtype.range_coe_subtype, Set.mem_preimage, coe_toNormedDual, Metric.mem_closedBall]
  rfl
  --sorry


#check Continuous.seqContinuous
#check IsSeqCompact
#check Module.Dual
#check WeakDual ‚ÑÇ V
#check Set (WeakDual ‚ÑÇ V)
#check IsCompact
#check @UniformSpace.isCompact_iff_isSeqCompact
#check IsCompact.isSeqCompact
#check TopologicalSpace.exists_countable_dense
#check subset_metrizable

end Seq_Banach_Alaoglu
